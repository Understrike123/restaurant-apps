{"version":3,"file":"app~a51fa3f5.bundle.js","mappings":";8IAIqB,GAAF,OAAKA,EAAAA,EAAAA,IAAU,SAKlC,QAJuB,SAACC,GAAE,gBAAQD,EAAAA,EAAAA,IAAU,mBAAWC,EAAE,qPCJzD,8hGAAAC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,0lBAAAA,EAAA,EAAAA,EAAA,SAAAA,IAAA,SAAAA,GAAA,+GAiBA,QAdyB,yBAHzB,4FAGyB,SAHzB,QAQK,EALoB,EAWpB,OAdL,EAGyB,OAHzB,EAGyB,sCACrB,sGAC2BC,MAAM,GAAD,OAAIH,EAAAA,EAAAA,IAAU,UAAQ,OAApC,OAARI,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaC,aAAW,2CAClC,oFAED,WAAwBN,GAAE,yFACCE,MAAMK,EAA+BP,IAAI,OAAlD,OAARG,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZI,EAAe,EAAH,uBACXA,EAAaC,YAAU,2CACjC,+CAdL,6DAcK,EAXoB,4SCHzB,8hGAAAR,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAIA,IAAQS,EAAuDX,EAAAA,EAAAA,cAAxCY,EAAwCZ,EAAAA,EAAAA,iBAAtBa,EAAsBb,EAAAA,EAAAA,kBAEzDc,GAAaC,EAAAA,EAAAA,IAAOJ,EAAeC,EAAkB,CACvDI,QAAO,SAACC,GACJA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC7D,IA2BJ,QAxBwB,CACdC,UAAS,SAACnB,GAAI,oGACXA,EAAI,CAAF,gEAIOa,EAAU,uCAAEO,IAAIR,EAAmBZ,IAAE,0CALnC,EAMpB,EACMqB,aAAY,WAAG,iHACHR,EAAU,uCAAES,OAAOV,IAAiB,0CADjC,EAErB,EACMW,UAAS,SAACC,GAAO,oGAEdA,EAAMC,eAAe,MAAO,CAAF,gEAIjBZ,EAAU,uCAAEa,IAAId,EAAmBY,IAAK,0CANnC,EAOvB,EACMG,aAAY,SAAC3B,GAAI,iHACLa,EAAU,8CAASD,EAAmBZ,IAAE,0CADnC,EAEvB,mCCtBJ,QAXe,CACX4B,IAAK,sCACLC,cAAe,oDACfC,eAAgB,qDAChBC,YAAa,oDACbC,IAAK,QACLtB,cAAe,wBACfC,iBAAkB,EAClBC,kBAAmB,sECDjBqB,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQC,SAASC,cAAc,eAC/BC,OAAQF,SAASC,cAAc,YAC/BE,QAASH,SAASC,cAAc,mBAIlCG,OAAOC,iBAAiB,cAAc,WACpCR,EAAIS,YACN,IAEAF,OAAOC,iBAAiB,QAAQ,WAC9BR,EAAIS,cACJC,EAAAA,EAAAA,IACF","sources":["webpack://restaurant-apps/./src/scripts/global/api-endpoint.js","webpack://restaurant-apps/./src/scripts/data/restaurantAPI.js","webpack://restaurant-apps/./src/scripts/data/restoLikeDB.js","webpack://restaurant-apps/./src/scripts/global/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["import CONFIG from \"./config\";\r\n\r\n// file akses endpoint API\r\nconst API_ENDPOINT = {\r\n    RESTAURANT_LIST: `${CONFIG.URL}/list`,\r\n    DETAIL_RESTAURANT: (id) => `${CONFIG.URL}/detail/${id}`,\r\n    SEARCH_RESTAURANTL: (search) => `${CONFIG.URL}/search?q=${search}`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import CONFIG from \"../global/config\";\r\nimport API_ENDPOINT from \"../global/api-endpoint\";\r\n\r\n// file akses API\r\nclass RestaurantAppSource {\r\n    static async GET_list() {\r\n        const response = await fetch(`${CONFIG.URL}/list`);\r\n        const responseJSON = await response.json();\r\n        return responseJSON.restaurants;\r\n    }\r\n\r\n    static async GET_Detail(id) {\r\n        const response = await fetch(API_ENDPOINT.DETAIL_RESTAURANT(id));\r\n        const responseJson = await response.json();\r\n        return responseJson.restaurant;\r\n    }\r\n}\r\n\r\nexport default RestaurantAppSource;\r\n","/* eslint-disable consistent-return */\r\nimport { openDB } from \"idb\";\r\nimport CONFIG from \"../global/config\";\r\n\r\n// file pembuatan database dari favorite restaurant\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\r\n\r\nconst DB_promise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n    upgrade(database) {\r\n        database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n    },\r\n});\r\n\r\nconst LikedRestaurant = {\r\n    async get_RESTO(id) {\r\n        if (!id) {\r\n            return;\r\n        }\r\n\r\n        return (await DB_promise).get(OBJECT_STORE_NAME, id);\r\n    },\r\n    async get_AllResto() {\r\n        return (await DB_promise).getAll(OBJECT_STORE_NAME);\r\n    },\r\n    async put_Resto(resto) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (!resto.hasOwnProperty('id')) {\r\n            return;\r\n        }\r\n\r\n        return (await DB_promise).put(OBJECT_STORE_NAME, resto);\r\n    },\r\n    async delete_Resto(id) {\r\n        return (await DB_promise).delete(OBJECT_STORE_NAME, id);\r\n    },\r\n};\r\n\r\nexport default LikedRestaurant;\r\n","// file seabagai peyimpanan variabel global yang diperlukan\r\nconst CONFIG = {\r\n    URL: 'https://restaurant-api.dicoding.dev',\r\n    SMALL_PICTURE: `https://restaurant-api.dicoding.dev/images/small/`,\r\n    MEDIUM_PICTURE: `https://restaurant-api.dicoding.dev/images/medium/`,\r\n    BIG_PICTURE: `https://restaurant-api.dicoding.dev/images/large/`,\r\n    KEY: '12345',\r\n    DATABASE_NAME: 'my-favorite-resto-idb',\r\n    DATABASE_VERSION: 1,\r\n    OBJECT_STORE_NAME: 'liked_restaurant',\r\n};\r\n\r\nexport default CONFIG;\r\n","/* eslint-disable max-len */\nimport 'regenerator-runtime'; /* for async await transpile */\nimport '../styles/main.css';\n// import RestaurantAppSource from './data/restaurantAPI.js';\nimport App from './views/app';\nimport swRegister from './utils/sw_regist';\n\n// file index sebagai entry point\nconst app = new App({\n  button: document.querySelector('#nav_toggle'),\n  drawer: document.querySelector('#app_bar'),\n  content: document.querySelector('#main_content'),\n\n});\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n  app.renderPage();\n  swRegister();\n});\n"],"names":["CONFIG","id","i","fetch","response","json","responseJSON","restaurants","API_ENDPOINT","responseJson","restaurant","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","DB_promise","openDB","upgrade","database","createObjectStore","keyPath","get_RESTO","get","get_AllResto","getAll","put_Resto","resto","hasOwnProperty","put","delete_Resto","URL","SMALL_PICTURE","MEDIUM_PICTURE","BIG_PICTURE","KEY","app","App","button","document","querySelector","drawer","content","window","addEventListener","renderPage","swRegister"],"sourceRoot":""}